import re
import ssl

def run_zmap(ifile, ofile, port, blacklist=None):
    import subprocess

    # optional blacklist
    bstring = f"-b {blacklist}" if blacklist else ""

    subprocess.run(f"zmap -w {ifile} -p {port} -o {ofile} {bstring}",
               shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

# find servers that have both ports 25 and 443 open
def find_candidates(cidrs, blacklist):
    import tempfile
    import shutil

    # directory for temporary files
    tempdir = tempfile.mkdtemp()

    # get hosts with TCP/25 open
    _, port_25 = tempfile.mkstemp(dir=tempdir)
    run_zmap(cidrs, port_25, 25, blacklist)

    # get hosts with both TCP/25 and TCP/443 open
    _, ports_25_443 = tempfile.mkstemp(dir=tempdir)
    run_zmap(port_25, ports_25_443, 443)

    with open(ports_25_443, "r") as f:
        results = [ip.strip() for ip in f.readlines()]

    shutil.rmtree(tempdir)
    return results

# tries to determine Exchange version and server name
regex = re.compile(b'href="/owa/auth/(?P<version>15\.[0-9\.]+)/themes/resources/favicon.ico"')
def get_exchange_version(ip, timeout):
    import requests
    import requests.packages.urllib3

    requests.packages.urllib3.disable_warnings()
    requests.adapters.DEFAULT_RETRIES = 3

    try:
        session = requests.Session()
        session.max_redirects = 1
        session.verify = False

        # if / redirects to /owa, that looks like an Exchange
        redirect = session.head(f"https://{ip}/", timeout=timeout).headers["location"]
        if redirect == f"https://{ip}/owa/":
            # default configuration of IIS/Exchange discloses hostname
            headers = session.head(f"https://{ip}/owa/", timeout=timeout).headers
            servername = headers["x-feserver"] if "x-feserver" in headers else None

            # the Exchange version is disclosed in the source, e.g. in favicon
            for line in session.get(f"https://{ip}/owa/", timeout=timeout).iter_lines():
                match = regex.search(line)
                if match:
                    return match.group("version").decode(), servername
    except:
        pass
    finally:
        session.close()

    return None, None


# Patched versions
#   Exchange Server 2013: 15.0.1497.6
#   Exchange Server 2016: 15.1.1847.7, 15.1.1913.7
#   Exchange Server 2019: 15.2.464.11, 15.2.529.8
def is_vulnerable(version):
    _, major, minor = version.split(".")
    major, minor = int(major), int(minor)

    if major == 0:
        # Exchange Server 2013, fixed: 15.0.1497.6
        if minor < 1497:
            return True
        else:
            return False
    elif major == 1:
        # Exchange Server 2016, fixed: 15.1.1847.7, 15.1.1913.7
        if minor < 1913 and minor != 1847:
            return True
        else:
            return False
    elif major == 2:
        # Exchange Server 2019, fixed: 15.2.464.11, 15.2.529.8
        if minor < 529 and minor != 464:
            return True
        else:
            return False

# extract Common Name from TLS certificate
def get_cn(ip):
    import socket
    import OpenSSL.crypto
    try:
        ctx = ssl.create_default_context()
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
        s = ctx.wrap_socket(socket.socket(), server_hostname=ip)
        s.connect((ip, 443))
        
        asn1 = s.getpeercert(True)
        cert = OpenSSL.crypto.load_certificate(
            OpenSSL.crypto.FILETYPE_ASN1, asn1)
        return cert.get_subject().CN
    except:
        return None

# determine rDNS/PTR of the IP
def get_reverse(ip):
    from dns import reversename, resolver

    try:
        query = reversename.from_address(ip)
        ptr = resolver.query(query, "PTR")[0]
        if ptr:
            return str(ptr)
        else:
            return None
    except:
        return None
